cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CXX_STANDARD 17)
project(inficom LANGUAGES CXX C)

# Check if at least one backend is enabled
if(NOT
   (BUILD_WITH_CUDA
    OR BUILD_WITH_AMD
    OR BUILD_WITH_MX))
  message(
    FATAL_ERROR
      "At least one backend (BUILD_WITH_CUDA, BUILD_WITH_AMD, or BUILD_WITH_MX) must be ON"
  )
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GLIBCXX_USE_CXX11_ABI=${ABI}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -U__CUDA_NO_HALF_OPERATORS__")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -U__CUDA_NO_HALF_CONVERSIONS__")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -U__CUDA_NO_BFLOAT16_CONVERSIONS__")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -U__CUDA_NO_HALF2_OPERATORS__")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O3 ")

option(BUILD_WITH_CUDA "Build with CUDA" OFF)
option(BUILD_WITH_AMD "Build with AMD" OFF)
option(BUILD_WITH_MX "Build with MX" OFF)

if(BUILD_WITH_CUDA)
  enable_language(CUDA)
  execute_process(
    COMMAND
      python3 -c
      "import torch;                                                  \
        device = torch.cuda.current_device();                           \
        compute_capability = torch.cuda.get_device_capability(device);  \
        print(compute_capability[0] * 100 + compute_capability[1] * 10)"
    OUTPUT_VARIABLE CUDA_ARCH
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  add_compile_options(-DBUILD_WITH_CUDA -DCUDA_ARCH=${CUDA_ARCH})
  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --generate-line-info")
  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -std=c++17")
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention/csrc/cutlass/include)
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention/csrc/cutlass/tools/util/include
  )
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention/csrc/flash_attn/src)
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-flashinfer/include)

  file(
    GLOB_RECURSE
    backend_ops
    inficom/ops/nvidia/attn/attention.cu
    inficom/ops/nvidia/element/residual.cu
    inficom/ops/nvidia/embedding/embedding.cu
    inficom/ops/nvidia/linear/gemm.cu
    inficom/ops/nvidia/linear/gemm_w4a16.cu
    inficom/ops/nvidia/linear/gemm_w8a8.cu
    inficom/ops/nvidia/norm/norm.cu
    inficom/ops/nvidia/cache/cache.cu
    inficom/kernels/nvidia/flash_attn/flash_api.cpp
    inficom/kernels/nvidia/flash_attn/flash_attn.cpp
    inficom/kernels/nvidia/flash_infer/flash_infer.cu
    inficom/kernels/nvidia/cutlass/dual_gemm/dual_gemm.cu
    inficom/kernels/nvidia/cutlass/w8a8/w8a8.cu
    3rdparty/flash-attention/csrc/flash_attn/src/flash_fwd*.cu)
  file(GLOB_RECURSE awq_op_lmdeploy_sources
       inficom/kernels/nvidia/gemm_s4_f16/gemm_s4_f16.cu
       inficom/kernels/nvidia/gemm_s4_f16/format.cu)
  file(GLOB_RECURSE awq_op_marlin_sources
       inficom/kernels/nvidia/marlin/marlin/marlin_cuda_kernel.cu)
  list(APPEND backend_ops ${awq_op_lmdeploy_sources} ${awq_op_marlin_sources})

elseif(BUILD_WITH_AMD)
  enable_language(HIP)
  add_compile_options(-DBUILD_WITH_AMD)
  message("Compiling rocm")

  set(CMAKE_HIP_FLAGS "${CMAKE_HIP_FLAGS} -O3 -std=c++20 -DNDEBUG")
  set(CMAKE_HIP_FLAGS "${CMAKE_HIP_FLAGS} -fopenmp -lgomp")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lncurses")

  # Rename flash_fwd*.cpp -> flash_fwd*.hip
  set(FA_PATH
      ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention-rocm/csrc/flash_attn_rocm/src
  )
  file(GLOB FA_SOURCES ${FA_PATH}/flash_fwd*.cpp ${FA_PATH}/device*.cpp)

  # todo [risk] overwrite .cpp by .hip instead of copying one
  foreach(SOURCE_FILE ${FA_SOURCES})
    set(HIP_EXTENSION hip)
    get_filename_component(BASE_NAME ${SOURCE_FILE} NAME_WE)
    set(HIP_FILE_PATH ${FA_PATH}/${BASE_NAME}.${HIP_EXTENSION})
    file(RENAME ${SOURCE_FILE} ${HIP_FILE_PATH})
    list(APPEND HIP_SOURCE_FILES ${HIP_FILE_PATH})
  endforeach()

  file(GLOB HIP_SOURCE_FILES ${FA_PATH}/flash_fwd*.hip ${FA_PATH}/device*.hip)

  # Dependencise Header
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention-rocm/csrc/flash_attn_rocm
  )
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention-rocm/csrc/flash_attn_rocm/src
  )
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention-rocm/csrc/flash_attn_rocm/composable_kernel/include
  )
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/flash-attention-rocm/csrc/flash_attn_rocm/composable_kernel/library/include
  )
  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/inficom/kernels/amd/flash_attn_rocm)

  # Core Sourcefiles
  file(
    GLOB_RECURSE
    backend_ops
    inficom/kernels/amd/flash_attn_rocm/flash_api.hip
    inficom/ops/amd/attn/*.hip
    inficom/ops/amd/element/residual.hip
    inficom/ops/amd/linear/*.hip
    inficom/ops/amd/embedding/*.hip
    inficom/ops/amd/norm/*.hip
    inficom/ops/amd/cache/*.hip)
  set(backend_ops ${HIP_SOURCE_FILES} ${backend_ops})

elseif(BUILD_WITH_MX)
  add_compile_options(-DBUILD_WITH_MX)

  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -g -O3 -lgomp -Xcompiler -fPIC")

  include_directories("/opt/maca/tools/cu-bridge/include", "/opt/maca/include",
                      "/opt/maca/include/common", "infini/interface/cc/")

  set(CUDA_CUDA_LIB
      "/opt/maca/lib/libruntime_cu.so"
      CACHE STRING "Description of the variable")
  set(CUDA_NVRTC_LIB
      "/opt/maca/lib/libruntime_cu.so"
      CACHE STRING "Description of the variable")
  set(LIBNVTOOLSEXT
      "/opt/maca/lib/libruntime_cu.so"
      CACHE STRING "Description of the variable")

  # Core Sourcefiles
  file(
    GLOB_RECURSE
    backend_ops
    inficom/ops/muxi/attn/*.cu
    inficom/ops/muxi/element/residual.cu
    inficom/ops/muxi/linear/*.cu
    inficom/ops/muxi/embedding/*.cu
    inficom/ops/muxi/norm/*.cu
    inficom/ops/muxi/cache/*.cu)

endif()

set(InficomLib inficom)
add_library(${InficomLib} STATIC ${backend_ops})
